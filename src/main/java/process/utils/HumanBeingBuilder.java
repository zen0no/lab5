package process.utils;

import process.dataClasses.*;
import process.exceptions.BuilderException;
import process.exceptions.IllegalModelFieldException;
import process.exceptions.ModelFieldException;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

public class HumanBeingBuilder {
    HumanBeing currentHuman;
    private int idCounter = 0;

    public void create(String primaryKey) throws BuilderException {
        if (currentHuman == null) currentHuman = new HumanBeing(primaryKey, idCounter);
        else throw new BuilderException("Builder is busy");
        idCounter++;
    }

    public void create(String primaryKey, int id, Date creationDate) throws BuilderException {
        if (currentHuman == null) currentHuman = new HumanBeing(primaryKey, id, creationDate);
        else throw new BuilderException("Builder is busy");

        if (id > idCounter){
            idCounter = id;
        }

    }

    public void update(HumanBeing entity) throws BuilderException, IllegalModelFieldException{
        if (currentHuman == null) currentHuman = entity;
        else throw  new BuilderException("Builder is busy");
    }

    public void build(String fieldName, Map<String, String> fieldValue) throws BuilderException{
       try{
            if (!HumanBeing.getFields().contains(fieldName))
                throw new BuilderException("HumanBeing.%s: no such field".formatted(fieldName));
            if (HumanBeing.getAutoGeneratedFields().contains(fieldName))
                throw new BuilderException("HumanBeing.%s: field is auto-generated");
            if (fieldName.equals("name")) currentHuman.setName(fieldValue.get("value"));
            if (fieldName.equals("coordinates")) currentHuman.setCoordinates(Coordinates.parseCoordinates(fieldValue));
            if (fieldName.equals("realHero")) currentHuman.setRealHero(parseBoolean(fieldValue.get("value")));
            if (fieldName.equals("hasToothpick")) currentHuman.setHasToothpick(parseBoolean(fieldValue.get("value")));
            if (fieldName.equals("impactSpeed")) currentHuman.setImpactSpeed(Integer.parseInt(fieldValue.get("value")));
            if (fieldName.equals("mood")) currentHuman.setMood(Mood.parseMood(fieldValue.get("value")));
            if (fieldName.equals("weaponType")) currentHuman.setWeaponType(WeaponType.parseWeaponType(fieldValue.get("value")));
            if (fieldName.equals("car")) currentHuman.setCar(Car.parseCar(fieldValue));
       }
       catch (ModelFieldException e){
           throw new BuilderException("Build error: " + e.getMessage());
       }
    }

    public void build(String fieldName, String fieldValue) throws ModelFieldException, BuilderException{
        try {
            if (!HumanBeing.getFields().contains(fieldName))
                throw new BuilderException("HumanBeing.%s: no such field".formatted(fieldName));
            if (HumanBeing.getAutoGeneratedFields().contains(fieldName))
                throw new BuilderException("HumanBeing.%s: field is auto-generated");
            if (fieldName.equals("name")) currentHuman.setName(fieldValue);
            if (fieldName.equals("coordinates")) currentHuman.setCoordinates(Coordinates.parseCoordinates(fieldValue));
            if (fieldName.equals("realHero")) currentHuman.setRealHero(parseBoolean(fieldValue));
            if (fieldName.equals("hasToothPick")) currentHuman.setHasToothpick(parseBoolean(fieldValue));
            if (fieldName.equals("impactSpeed")) currentHuman.setImpactSpeed(Integer.parseInt(fieldValue));
            if (fieldName.equals("mood")) currentHuman.setMood(Mood.parseMood(fieldValue));
            if (fieldName.equals("weaponType")) currentHuman.setWeaponType(WeaponType.parseWeaponType(fieldValue));
            if (fieldName.equals("Car")) currentHuman.setCar(Car.parseCar(fieldValue));
        }
        catch (ModelFieldException e){
            throw new BuilderException("Build error: " + e.getMessage());
        }
    }

    public HumanBeing get() throws BuilderException{
        for (String field: HumanBeing.getFields()) if (!currentHuman.getCurrentFields().contains(field))
            throw new BuilderException("HumanBeing.%s: field must be specified".formatted(field));
        HumanBeing temp = currentHuman;
        currentHuman = null;
        return temp;
    }

    public void setIdCounter(int idCounter) {
        this.idCounter = idCounter;
    }

    private Boolean parseBoolean(String s){
        if ("true".equals(s.toLowerCase(Locale.ROOT))) return true;
        if ("false".equals(s.toLowerCase(Locale.ROOT))) return false;
        return null;
    }
}
